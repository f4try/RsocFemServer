 * Serving Flask app "main" (lazy loading)
 * Environment: production
   WARNING: This is a development server. Do not use it in a production deployment.
   Use a production WSGI server instead.
 * Debug mode: off
 * Running on http://0.0.0.0:80/ (Press CTRL+C to quit)
202.200.238.211 - - [06/Dec/2020 20:30:57] "[33mGET /static/assets/dist/js/jquery.slim.min.js HTTP/1.1[0m" 404 -
202.200.238.211 - - [06/Dec/2020 20:31:05] "[37mGET / HTTP/1.1[0m" 200 -
202.200.238.211 - - [06/Dec/2020 20:31:06] "[37mGET /fem HTTP/1.1[0m" 200 -
202.200.238.211 - - [06/Dec/2020 20:31:09] "[33mGET /static/assets/dist/js/jquery.slim.min.js HTTP/1.1[0m" 404 -
sfepy: left over: ['__name__', '__doc__', '__package__', '__loader__', '__spec__', '__file__', '__cached__', '__builtins__', 'absolute_import', 'sys', 'np', 'output', 'params2', 'i_c', 'os', 'i_a', 'per', 'kappa_c', 'kappa_s', 'kappa_m', 'k_c', 'k_s', 'k_l', 'T', 'xH2', 'pfuel', 'xO2', 'pair', 'V_cell', 'kappa_p', 'eta', 'p_ref', 'drag', 'E_eq_a', 'E_eq_c', 'i0_a', 'i0_c', 'S', 'R_agg', 'eps_mic', 'eps_mac', 'D_agg', 'D_effH2_H2O', 'D_effO2_N2', 'D_effH2O_N2', 'D_effO2_H2O', 'wH2_in', 'wO2_in', 'wH2Oc_in', 'MH2', 'MO2', 'MH2O', 'MN2', 'xH2_in', 'xO2_in', 'KH2', 'KO2', 'cH2_ref', 'cO2_ref', 'cH2O_ref', 'l_act', 'F_const', 'R_const', 'K', 't0', 't1', 'n_step', 'specific_heat', 'cwd', 'get_is', 'get_tpb_an', 'get_tpb_ca', 'set_electric_bc', 'get_shift1', 'get_shift2', 'verbose', '_filename']
sfepy: reading mesh [line2, tri3, quad4, tetra4, hexa8] (mesh/3dcell.mesh)...
sfepy: ...done in 0.04 s
sfepy: creating regions...
sfepy:     Omega
sfepy:     Omega_topchannel
sfepy:     Omega_top
sfepy:     Omega_middle
sfepy:     Omega_bottom
sfepy:     Omega_bottomchannel
sfepy:     topconnector
sfepy:     bottomconnector
sfepy:     Omega_toppart
sfepy:     Omega_bottompart
sfepy:     Omega_cell
sfepy:     topinlet
sfepy:     topoutlet
sfepy:     bottominlet
sfepy:     bottomoutlet
sfepy:     Omega_Surface_T
sfepy:     Omega_Surface_TS
sfepy:     Omega_Surface_BS
sfepy:     Omega_Surface_B
sfepy:     Omega_Surface_T1
sfepy:     Omega_Surface_T2
sfepy:     Omega_Surface_TS1
sfepy:     Omega_Surface_TS2
sfepy:     Omega_Surface_BS1
sfepy:     Omega_Surface_BS2
sfepy:     Omega_Surface_B1
sfepy:     Omega_Surface_B2
sfepy: ...done in 0.10 s
sfepy: equation "2":
sfepy: 1.200000000000e+00 *dw_volume_dot.i.Omega( s, dT/dt )
            + dw_laplace.i.Omega( m.thermal_conductivity, s, T )
            =-dw_electric_source.i.Omega_top( m.DH,s, phis1 )-dw_electric_source.i.Omega_middle( m.DH,
                                           s, phil )-dw_electric_source.i.Omega_bottom( m.DH,
                                           s, phis3 )+dw_bc_newton.2.Omega_Surface_T2(m.h,m.T0,s,T)
                                           +dw_bc_newton.2.Omega_Surface_B1(m.h,m.T0,s,T)
sfepy: equation "eq1":
sfepy: dw_laplace.i.Omega_cell( m.electroyle_conductivity, psil, phil ) 
           = dw_surface_integrate.i.Omega_Surface_TS2(m.i0,psil)
           -dw_surface_integrate.i.Omega_Surface_BS1(m.i0,psil)
sfepy: equation "eq2":
sfepy: dw_laplace.i.Omega_top( m.electric_conductivity, psis1, phis1 ) 
           = dw_surface_integrate.i.Omega_Surface_TS1(m.i0,psis1)
sfepy: equation "eq3":
sfepy: dw_laplace.i.Omega_bottom( m.electric_conductivity, psis3, phis3 ) 
           = dw_surface_integrate.i.Omega_Surface_BS2(m.i0,psis3)
sfepy: equation "advection-diffusion-anode-h2":
sfepy: dw_volume_dot.i.Omega_top(c_h2as, dc_h2a/dt)
     + dw_advect_div_free.i.Omega_top(m.v, c_h2as, c_h2a)
     + dw_laplace.i.Omega_top(m.D, c_h2as, c_h2a)
     = dw_laplace.i.Omega_top(m.nFA_h2,c_h2as,phis1)
sfepy: equation "advection-diffusion-anode-h2o":
sfepy: dw_volume_dot.i.Omega_top(c_h2oas, dc_h2oa/dt)
     + dw_advect_div_free.i.Omega_top(m.v, c_h2oas, c_h2oa)
     + dw_laplace.i.Omega_top(m.D, c_h2oas, c_h2oa)
     = dw_laplace.i.Omega_top(m.nFA_h2o,c_h2oas,phis1)
sfepy: equation "advection-diffusion-cathode-o2":
sfepy: dw_volume_dot.i.Omega_bottom(c_o2cs, dc_o2c/dt)
     + dw_advect_div_free.i.Omega_bottom(m.v, c_o2cs, c_o2c)
     + dw_laplace.i.Omega_bottom(m.D, c_o2cs, c_o2c)
     = dw_laplace.i.Omega_bottom(m.nFA_o2,c_o2cs,phis3)
sfepy: equation "advection-diffusion-cathode-n2":
sfepy: dw_volume_dot.i.Omega_bottom(c_n2cs, dc_n2c/dt)
     + dw_advect_div_free.i.Omega_bottom(m.v, c_n2cs, c_n2c)
     + dw_laplace.i.Omega_bottom(m.D, c_n2cs, c_n2c)
     = 0
sfepy: equation "darcy1":
sfepy: dw_laplace.i.Omega_topchannel(m.p1_k, q1, p1)
     = 0
sfepy: equation "darcy2":
sfepy: dw_laplace.i.Omega_bottomchannel(m.p2_k, q2, p2)
     = 0
sfepy: using solvers:
                ts: no ts
               nls: newton
                ls: ls
sfepy: updating variables...
sfepy: ...done
sfepy: setting up dof connectivities...
sfepy: ...done in 0.03 s
sfepy: matrix shape: (37337, 37337)
sfepy: assembling matrix graph...
sfepy: ...done in 0.08 s
sfepy: matrix structural nonzeros: 1017965 (7.30e-04% fill)
sfepy: updating variables...
sfepy: ...done
sfepy: updating materials...
sfepy:     m
sfepy: ...done in 0.08 s
sfepy: nls: iter: 0, residual: 3.654309e+08 (rel: 1.000000e+00)
sfepy:   residual:    0.18 [s]
sfepy:     matrix:    0.24 [s]
sfepy:      solve:    3.16 [s]
sfepy: warning: linear system solution precision is lower
sfepy: then the value set in solver options! (err = 8.363675e-05 < 1.000000e-10)
sfepy: nls: iter: 1, residual: 6.022793e-04 (rel: 1.648134e-12)
sfepy: solved in 1 steps in 4.02 seconds
qt.qpa.screen: QXcbConnection: Could not connect to display 
Could not connect to any X display.
202.200.238.211 - - [06/Dec/2020 20:31:11] "[37mPOST /result3d HTTP/1.1[0m" 200 -
sfepy: left over: ['__name__', '__doc__', '__package__', '__loader__', '__spec__', '__file__', '__cached__', '__builtins__', 'absolute_import', 'sys', 'np', 'output', 'params2', 'i_c', 'os', 'i_a', 'per', 'kappa_c', 'kappa_s', 'kappa_m', 'k_c', 'k_s', 'k_l', 'T', 'xH2', 'pfuel', 'xO2', 'pair', 'V_cell', 'kappa_p', 'eta', 'p_ref', 'drag', 'E_eq_a', 'E_eq_c', 'i0_a', 'i0_c', 'S', 'R_agg', 'eps_mic', 'eps_mac', 'D_agg', 'D_effH2_H2O', 'D_effO2_N2', 'D_effH2O_N2', 'D_effO2_H2O', 'wH2_in', 'wO2_in', 'wH2Oc_in', 'MH2', 'MO2', 'MH2O', 'MN2', 'xH2_in', 'xO2_in', 'KH2', 'KO2', 'cH2_ref', 'cO2_ref', 'cH2O_ref', 'l_act', 'F_const', 'R_const', 'K', 't0', 't1', 'n_step', 'specific_heat', 'cwd', 'get_is', 'get_tpb_an', 'get_tpb_ca', 'set_electric_bc', 'get_shift1', 'get_shift2', 'verbose', '_filename']
sfepy: reading mesh [line2, tri3, quad4, tetra4, hexa8] (mesh/3dcell.mesh)...
sfepy: ...done in 0.04 s
sfepy: creating regions...
sfepy:     Omega
sfepy:     Omega_topchannel
sfepy:     Omega_top
sfepy:     Omega_middle
sfepy:     Omega_bottom
sfepy:     Omega_bottomchannel
sfepy:     topconnector
sfepy:     bottomconnector
sfepy:     Omega_toppart
sfepy:     Omega_bottompart
sfepy:     Omega_cell
sfepy:     topinlet
sfepy:     topoutlet
sfepy:     bottominlet
sfepy:     bottomoutlet
sfepy:     Omega_Surface_T
sfepy:     Omega_Surface_TS
sfepy:     Omega_Surface_BS
sfepy:     Omega_Surface_B
sfepy:     Omega_Surface_T1
sfepy:     Omega_Surface_T2
sfepy:     Omega_Surface_TS1
sfepy:     Omega_Surface_TS2
sfepy:     Omega_Surface_BS1
sfepy:     Omega_Surface_BS2
sfepy:     Omega_Surface_B1
sfepy:     Omega_Surface_B2
sfepy: ...done in 0.10 s
sfepy: equation "2":
sfepy: 1.200000000000e+00 *dw_volume_dot.i.Omega( s, dT/dt )
            + dw_laplace.i.Omega( m.thermal_conductivity, s, T )
            =-dw_electric_source.i.Omega_top( m.DH,s, phis1 )-dw_electric_source.i.Omega_middle( m.DH,
                                           s, phil )-dw_electric_source.i.Omega_bottom( m.DH,
                                           s, phis3 )+dw_bc_newton.2.Omega_Surface_T2(m.h,m.T0,s,T)
                                           +dw_bc_newton.2.Omega_Surface_B1(m.h,m.T0,s,T)
sfepy: equation "eq1":
sfepy: dw_laplace.i.Omega_cell( m.electroyle_conductivity, psil, phil ) 
           = dw_surface_integrate.i.Omega_Surface_TS2(m.i0,psil)
           -dw_surface_integrate.i.Omega_Surface_BS1(m.i0,psil)
sfepy: equation "eq2":
sfepy: dw_laplace.i.Omega_top( m.electric_conductivity, psis1, phis1 ) 
           = dw_surface_integrate.i.Omega_Surface_TS1(m.i0,psis1)
sfepy: equation "eq3":
sfepy: dw_laplace.i.Omega_bottom( m.electric_conductivity, psis3, phis3 ) 
           = dw_surface_integrate.i.Omega_Surface_BS2(m.i0,psis3)
sfepy: equation "advection-diffusion-anode-h2":
sfepy: dw_volume_dot.i.Omega_top(c_h2as, dc_h2a/dt)
     + dw_advect_div_free.i.Omega_top(m.v, c_h2as, c_h2a)
     + dw_laplace.i.Omega_top(m.D, c_h2as, c_h2a)
     = dw_laplace.i.Omega_top(m.nFA_h2,c_h2as,phis1)
sfepy: equation "advection-diffusion-anode-h2o":
sfepy: dw_volume_dot.i.Omega_top(c_h2oas, dc_h2oa/dt)
     + dw_advect_div_free.i.Omega_top(m.v, c_h2oas, c_h2oa)
     + dw_laplace.i.Omega_top(m.D, c_h2oas, c_h2oa)
     = dw_laplace.i.Omega_top(m.nFA_h2o,c_h2oas,phis1)
sfepy: equation "advection-diffusion-cathode-o2":
sfepy: dw_volume_dot.i.Omega_bottom(c_o2cs, dc_o2c/dt)
     + dw_advect_div_free.i.Omega_bottom(m.v, c_o2cs, c_o2c)
     + dw_laplace.i.Omega_bottom(m.D, c_o2cs, c_o2c)
     = dw_laplace.i.Omega_bottom(m.nFA_o2,c_o2cs,phis3)
sfepy: equation "advection-diffusion-cathode-n2":
sfepy: dw_volume_dot.i.Omega_bottom(c_n2cs, dc_n2c/dt)
     + dw_advect_div_free.i.Omega_bottom(m.v, c_n2cs, c_n2c)
     + dw_laplace.i.Omega_bottom(m.D, c_n2cs, c_n2c)
     = 0
sfepy: equation "darcy1":
sfepy: dw_laplace.i.Omega_topchannel(m.p1_k, q1, p1)
     = 0
sfepy: equation "darcy2":
sfepy: dw_laplace.i.Omega_bottomchannel(m.p2_k, q2, p2)
     = 0
sfepy: using solvers:
                ts: no ts
               nls: newton
                ls: ls
sfepy: updating variables...
sfepy: ...done
sfepy: setting up dof connectivities...
sfepy: ...done in 0.03 s
sfepy: matrix shape: (37337, 37337)
sfepy: assembling matrix graph...
sfepy: ...done in 0.08 s
sfepy: matrix structural nonzeros: 1017965 (7.30e-04% fill)
sfepy: updating variables...
sfepy: ...done
sfepy: updating materials...
sfepy:     m
sfepy: ...done in 0.08 s
sfepy: nls: iter: 0, residual: 3.654309e+08 (rel: 1.000000e+00)
sfepy:   residual:    0.19 [s]
sfepy:     matrix:    0.25 [s]
sfepy:      solve:    3.23 [s]
sfepy: warning: linear system solution precision is lower
sfepy: then the value set in solver options! (err = 8.363675e-05 < 1.000000e-10)
sfepy: nls: iter: 1, residual: 6.022793e-04 (rel: 1.648134e-12)
sfepy: solved in 1 steps in 4.03 seconds
qt.qpa.screen: QXcbConnection: Could not connect to display 
Could not connect to any X display.
202.200.238.211 - - [06/Dec/2020 20:31:16] "[37mPOST /result3d HTTP/1.1[0m" 200 -
202.200.238.211 - - [06/Dec/2020 20:31:36] "[37mGET / HTTP/1.1[0m" 200 -
202.200.238.211 - - [06/Dec/2020 20:31:37] "[37mGET /docs HTTP/1.1[0m" 200 -
202.200.238.211 - - [06/Dec/2020 20:31:40] "[37mGET /about HTTP/1.1[0m" 200 -
202.200.238.211 - - [06/Dec/2020 20:31:41] "[37mGET /fem HTTP/1.1[0m" 200 -
202.200.238.211 - - [06/Dec/2020 20:31:42] "[37mGET / HTTP/1.1[0m" 200 -
202.200.238.211 - - [06/Dec/2020 20:31:43] "[37mGET /docs HTTP/1.1[0m" 200 -
202.200.238.211 - - [06/Dec/2020 20:31:47] "[37mGET /about HTTP/1.1[0m" 200 -
202.200.238.211 - - [06/Dec/2020 20:31:48] "[37mGET /fem HTTP/1.1[0m" 200 -
202.200.238.211 - - [06/Dec/2020 20:31:48] "[37mGET / HTTP/1.1[0m" 200 -
202.200.238.211 - - [06/Dec/2020 20:42:07] "[37mGET / HTTP/1.1[0m" 200 -
106.75.99.182 - - [06/Dec/2020 20:45:34] "[37mGET / HTTP/1.1[0m" 200 -
106.75.99.182 - - [06/Dec/2020 20:45:34] "[37mGET / HTTP/1.1[0m" 200 -
